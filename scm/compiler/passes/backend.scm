(define-module (hans compiler passes backend)
  :use-module (srfi srfi-1)
  :use-module (hans common)
  :use-module (hans compiler shared)
  :use-module (hans patcher)
  :use-module (hans objects)
  :use-module (hans utils)
  :export (emit-libraries
           emit-arguments
           emit-audio-graphs
           emit-graphics-graphs
           emit-programs
           emit-parameters
           emit-parameters-values
           emit-modulators
           emit-registers
           emit-fbos
           emit-fbos-attachments
           emit-shaders
           emit-ring-buffers
           emit-audio-buffers
           make-strings
           backend-pass))

(define (%flatten lst)
  (fold (lambda (item out) (append out item)) '() lst))

(define (%list-parameters programs)
  (%flatten (map (lambda (obj)
                   (map (lambda (parameter)
                          (cons (hans-object-instance-id obj)
                                parameter))
                        (object-record-parameters (hans-object-rec obj))))
                  (list-objects programs))))

(define (%list-fbos programs)
  (fold (lambda (obj fbos)
          (let ((rec (hans-object-rec obj)))
            (if (and (graphics-object? rec)
                     (not (eq? '() (object-record-fbo rec))))
              (append fbos `(,(cons obj (object-record-fbo rec))))
              fbos)))
        '()
        (list-objects programs)))

(define (%list-registers programs)
  (%flatten (map (lambda (obj)
                   (let ((registers (hans-object-registers obj)))
                     (map (lambda (register)
                          (cons obj register))
                        (if (eq? #f registers) '() registers))))
                 (list-objects programs))))

(define (emit-libraries programs)
  (let ((libraries (list-libraries programs)))
    (cons `((filepaths . ,(map hans-hash libraries))) libraries)))

(define (emit-parameters-values programs)
  (cons (%flatten (map (lambda (data)
                         (parameter-value (cdr data)))
                       (%list-parameters programs)))
        '()))

(define (emit-parameters programs)
  (cons
    (let ((offset 0))
      (map (lambda (data)
             (let* ((param (cdr data))
                    (size  (parameter-components param))
                    (out   `((object . ,(car data))
                             (name   . ,(hans-hash (parameter-name param)))
                             (size   . ,size)
                             (offset . ,offset))))
               (set! offset (+ offset size))
               out))
           (%list-parameters programs)))
    (delete-duplicates (map (compose symbol->string parameter-name cdr)
                            (%list-parameters programs)))))

(define (emit-modulators programs)
  (define (transform-mod mod)
    `((source . (
        (object    . ,(hans-object-instance-id (list-ref mod 0)))
        (parameter . ,(hans-hash (list-ref mod 1)))
        (component . ,(list-ref mod 2))))
      (dest   . (
        (object    . ,(hans-object-instance-id (list-ref mod 3)))
        (parameter . ,(hans-hash (list-ref mod 4)))
        (component . ,(list-ref mod 5))))
      (offset . ,(list-ref mod 6))
      (scale  . ,(list-ref mod 7))))

  (cons (fold (lambda (program prev)
                (let ((modulators (hans-program-modulators program)))
                  (append prev (map transform-mod modulators))))
              '()
              programs)
        '()))

(define %graphics-object? (compose graphics-object? hans-object-rec))
(define %audio-object? (compose audio-object? hans-object-rec))
(define %object-name (compose object-record-name hans-object-rec))

(define (%emit-objects programs object-filter)
  (let ((objects (filter object-filter (list-objects programs))))
    (cons (map (lambda (object)
                 `((id   . ,(hans-object-instance-id object))
                   (name . ,(hans-hash (%object-name object)))))
               objects)
          (delete-duplicates (map %object-name objects)))))

(define (%index-of needle haystack)
  (list-index (lambda (item)
                (eq? needle item)) haystack))

(define (%make-indices items table)
  (map (lambda (item)
         (%index-of item table)) items))

(define (pophead lst)
  (reverse (cdr (reverse lst))))

(define (%make-offsets lst)
  (append '(0) (pophead (fold (lambda (current memo)
                                (let ((value (if (null? memo)
                                               current
                                               (+ current (last memo)))))
                                  (append memo `(,value)))) '() lst))))

(define (%graphs-indices programs graph-selector object-filter)
  (let ((selector (compose hans-graph-objects graph-selector))
        (ids (map hans-object-instance-id
                  (filter object-filter (list-objects programs)))))
    (fold (lambda (program indices)
            (append indices (%make-indices (map hans-object-instance-id
                                                (selector program)) ids)))
          '() programs)))

(define (%graphs-ranges programs graph-selector object-filter)
  (let ((objects-num (map (compose length hans-graph-objects graph-selector)
                      programs)))
    (map (lambda (item)
           `((start . ,(car item))
             (end   . ,(+ (car item) (last item)))))
         (zip (%make-offsets objects-num) objects-num))))

(define (%emit-graphs programs graph-selector object-filter)
  (let* ((objects        (filter object-filter (list-objects programs)))
         (output-objects (%emit-objects programs object-filter)))
    (cons `((objects . ,(car output-objects))
            (indices . ,(%graphs-indices programs graph-selector object-filter))
            (ranges  . ,(%graphs-ranges programs graph-selector object-filter))
            (states  . ,(map hans-object-data
                             (filter object-filter (list-objects programs)))))
          (cdr output-objects))))

(define %audio-object? (compose audio-object? hans-object-rec))
(define %graphics-object? (compose graphics-object? hans-object-rec))

(define (%tag-pair arg)
  (cond ((or (string? (cdr arg)) (symbol? (cdr arg)))
          `((type    . ,(hans-primitive-enum 'ARGUMENTS 'string))
            (name    . ,(hans-hash (car arg)))
            (boolean . #f)
            (number  . 0)
            (string  . ,(hans-hash (cdr arg)))))
        ((number? (cdr arg))
          `((type    . ,(hans-primitive-enum 'ARGUMENTS 'number))
            (name    . ,(hans-hash (car arg)))
            (boolean . #f)
            (number  . ,(cdr arg))
            (string  . 0)))
        ((boolean? (cdr arg))
          `((type    . ,(hans-primitive-enum 'ARGUMENTS 'boolean))
            (name    . ,(hans-hash (car arg)))
            (boolean . ,(cdr arg))
            (number  . 0)
            (string  . 0)))))

(define (emit-arguments programs object-filter)
  (let ((objects (filter object-filter (list-objects programs))))
    (cons (fold (lambda (obj result)
                  (let* ((arguments (assq-ref result 'arguments))
                         (lengths (assq-ref result 'lengths))
                         (offsets (assq-ref result 'offsets))
                         (args (hans-object-args obj))
                         (tags (map %tag-pair args)))
                      `((arguments . ,(append arguments tags))
                        (offsets   . ,(append offsets `(,(length arguments))))
                        (lengths   . ,(append lengths `(,(length args)))))))
                `((arguments . ())
                  (offsets   . ())
                  (lengths   . ())) objects)
          (fold (lambda (obj strs)
                  (append strs
                          (filter string? (map cdr (hans-object-args obj)))
                          (map (compose symbol->string car)
                               (hans-object-args obj)))) '() objects))))

(define (emit-audio-graphs programs)
  (%emit-graphs programs hans-program-audio-graph %audio-object?))

(define (emit-graphics-graphs programs)
  (%emit-graphs programs hans-program-graphics-graph %graphics-object?))

(define (emit-programs programs)
  (let ((names (map hans-program-name programs))
        (audio-data (emit-audio-graphs programs))
        (graphics-data (emit-graphics-graphs programs)))
    (cons `((names    . ,(map hans-hash names))
            (audio    . ,(car audio-data))
            (graphics . ,(car graphics-data)))
          (append names
                  (cdr audio-data)
                  (cdr graphics-data)))))

(define (emit-registers programs)
  (cons (map (lambda (data)
               (let* ((obj (car data))
                      (reg (cdr data))
                      (id (hans-object-instance-id obj))
                      (rec (hans-object-rec obj))
                      (type (object-record-type rec)))
                `((object   . ,id)
                  (type     . ,(hans-primitive-enum 'OBJECTS type))
                  (graph    . ,(list-ref reg 0))
                  (index    . ,(list-ref reg 1))
                  (bin      . ,(list-ref reg 2))
                  (readonly . ,(list-ref reg 3)))))
             (%list-registers programs))
        '()))

(define (emit-fbos-attachments programs)
  (define output '())
  (for-each (lambda (data)
              (let* ((obj (car data))
                     (fbo (cdr data))
                     (rec (hans-object-rec obj))
                     (id (hans-object-instance-id obj))
                     (type (object-record-type rec)))
                (set! output (append output (map
                  (lambda (attachment)
                    `((type       . ,(hans-primitive-enum
                                       'FBO_ATTACHMENTS
                                       (fbo-attachment-type attachment)))
                      (width      . ,(fbo-attachment-width attachment))
                      (height     . ,(fbo-attachment-height attachment))
                      (components . ,(fbo-attachment-components attachment))))
                  (fbo-attachments fbo))))))
            (%list-fbos programs))
  (cons output '()))

(define (emit-fbos programs)
  (define offset 0)
  (cons (map (lambda (data)
               (let* ((obj (car data))
                      (id (hans-object-instance-id obj))
                      (fbo (cdr data))
                      (num (length (fbo-attachments fbo)))
                      (out `((object         . ,id)
                             (stencil_buffer . ,(fbo-stencil-buffer fbo))
                             (start          . ,offset)
                             (end            . ,(+ offset num)))))
                 (set! offset (+ offset num))
                 out))
             (%list-fbos programs))
        '()))

(define (emit-shaders programs)
  (let ((shaders (list-shaders programs)))
    (cons (map (lambda (shdr)
                 `((type . ,(hans-primitive-enum 'SHADERS (shader-type shdr)))
                   (name . ,(hans-hash (shader-name shdr)))
                   (code . ,(hans-hash (shader-code shdr)))))
               shaders)
          (append
            (map shader-name shaders)
            (map shader-code shaders)))))

(define (emit-ring-buffers programs)
  (let ((objects (list-objects programs))
        (index   -1))
    (cons
      (fold (lambda (obj buffers)
              (let* ((res (hans-object-resources obj))
                     (name (assoc-ref res 'ring-buffer)))
                (if (not (eq? name #f))
                  (begin
                    (set! index (+ 1 index))
                    (append buffers `((
                      (producer . ,(hans-object-instance-id obj))
                      (name     . ,(hans-hash name))
                      (index    . ,index)))))
                  buffers)))
            '()
            objects)
      (remove (lambda (val) (eq? val #f))
              (map (compose (lambda (res)
                              (assoc-ref res 'ring-buffer))
                            hans-object-resources) objects)))))

(define (emit-audio-buffers programs)
  (cons
    (fold (lambda (obj buffers)
            (let ((rec (hans-object-rec obj))
                  (instance-id (hans-object-instance-id obj))
                  (item '()))
              (for-each (lambda (buff)
                          (set! buffers (append buffers `((
                            (object   . ,instance-id)
                            (name     . ,(hans-hash (audio-buffer-name buff)))
                            (channels . ,(audio-buffer-channels buff))
                            (size     . ,(audio-buffer-size buff)))))))
                        (object-record-audio-buffers rec))
              buffers))
          '()
          (list-objects programs))
    (map audio-buffer-name (list-audio-buffers programs))))

(define (make-strings strings)
  (let ((lengths '())
        (hashes  '())
        (buffer  ""))
    (for-each (lambda (str)
                (set! hashes (append hashes `(,(hans-hash str))))
                (set! lengths (append lengths `(,(string-length str))))
                (set! buffer (string-append buffer str)))
              (delete-duplicates strings))
    `((buffer  . ,buffer)
      (lengths . ,lengths)
      (hashes  . ,hashes))))

(define (backend-pass programs output options)
  (define strings '())
  (define out (hans-primitive-get output))

  (define (set-engine-data! key emitter)
    (let* ((res (emitter programs))
           (data (car res))
           (strs (cdr res)))
      (set! out (assq-set! out key data))
      (set! strings (append strings strs))))

  (set! out (assq-set! out 'settings options))
  (for-each (lambda (task)
              (set-engine-data! (car task) (cdr task)))
            `((plugins           . ,emit-libraries)
              (programs          . ,emit-programs)
              (parameters        . ,emit-parameters)
              (parameters_values . ,emit-parameters-values)
              (modulators        . ,emit-modulators)
              (registers         . ,emit-registers)
              (fbos              . ,emit-fbos)
              (fbos_attachments  . ,emit-fbos-attachments)
              (shaders           . ,emit-shaders)
              (ring_buffers      . ,emit-ring-buffers)
              (audio_buffers     . ,emit-audio-buffers)
              (snd-arguments     . ,(lambda (programs)
                                      (emit-arguments
                                        programs %audio-object?)))
              (gfx-arguments     . ,(lambda (programs)
                                      (emit-arguments
                                        programs %graphics-object?)))))

  (set-hans-primitive! output (assq-set! out 'strings (make-strings strings)))
  output)
