#!/usr/bin/guile \
-e main -s
!#

;; # vim: set filetype=scheme:

(use-modules (ice-9 getopt-long)
             (hans compiler)
             (hans engine)
             (hans os)
             (hans patcher)
             (hans plugin gfx-quad objects)
             (hans plugin gfx-script objects))

(define help-msg "\
A tool to compile and run standalone Hans script files

Usage:
  hans-script [options] <script>
  hans-script (-h | --help)
  hans-script --version

Options:
  -h, --help      Show this screen
  --width         Width of sketch window
  --height        Height of sketch window")

(define option-spec
  '((help    (single-char #\h) (value #f))
    (width   (value #t))
    (height  (value #t))))

(define (exit-with-msg msg)
  (display msg)
  (newline)
  (exit 0))

(define (make-pgm env sketch)
  (let ((script (env 'create 'gfx-script `((path . ,sketch)) '(0 0)))
        (window (env 'create 'gfx-quad '() '(0 0))))
    (make-program sketch
      (make-graphics-graph
        (env 'connect script 0 window 0)))))

(define (main args)
  (let* ((opts (getopt-long args option-spec))
         (path (option-ref opts '() #f))
         (out (tmpnam)))

    (define env (make-environment
      `((width      . ,(option-ref opts 'width 640))
        (height     . ,(option-ref opts 'height 360)))
      `((gfx-quad   . ,gfx-quad)
        (gfx-script . ,gfx-script))))

    (define compile-settings `((output . ,out)))

    (if (or (option-ref opts 'help #f) (null? path))
      (exit-with-msg help-msg))

    (let ((f (hans-file `(,(make-pgm env (car path))))))
      (hans-compile f compile-settings)
      (let ((engine (make-engine out)))
        (delete-file out)
        (engine-run engine)))))
